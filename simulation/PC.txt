library(MASS)
#library(genlasso)
library(scalreg)

#---AR covariance structure---

ARcov = function(p, rho){
    Cov = matrix(0, p, p)
    for (i in 1 : p){
        for (j in 1 : p){
            Cov[i, j] = rho^(abs(i - j))
        }
    }
    return(Cov)
}


#---AR k structure---

AR2 = function(p, rho, tau2 = 1){
	P = diag(rep(tau2, p))
	k = length(rho)
	for (i in 1 : k){
		for (j in 1 : (p - i)){
			P[j, j + i] = rho[i]
			P[j + i, j] = rho[i]
		}
	}
	return(P)
}

#---AR random---

ARR = function(p, limit, tau2 = 1){
#k is the bandwidth of the AR precision; limit is a length 2k vector with the lower and upper bound for each off-diagonal
	P = diag(rep(tau2, p))
	for (i in 1 : (p - 1)){
		if (i <= 2 * p / 3) temp = limit[1]
		if (i > 2 * p / 3) temp = limit[2]
		P[i, i + 1] = temp
		P[i + 1, i] = temp
	}
	return(P)
}

ARR2 = function(p, limit, tau2 = 1){
	P = diag(rep(tau2, p))
	for (i in 1 : (p - 1)){
		temp = runif(1, min = limit[1], max = limit[2])
		P[i, i + 1] = temp
		P[i + 1, i] = temp		
	}
	return(P)
}

#---Random support precision structure---

RS = function(p, epsilon, limit, tau2 = 1){
#the support is from a binary distribution with prob. of success epsilon; limit is the 2 dim. vector given the bound of the the uniform distribution
	Cov = diag(rep(tau2, p))
	for (i in 1 : (p - 1)){
		for (j in (i + 1) : p){
			Cov[i, j] = rbinom(1, 1, epsilon) * sample(limit, 1)
			Cov[j, i] = Cov[i, j]
		}
	}
	return(Cov)
}


#---Block diagonal covariance structure---

BD = function(p, k, tau2, rho){
	# k is the number of blocks
	C = matrix(0, p, p)
	d = p / k
	for (m in 1 : k){
		for (i in ((m - 1) * d + 1) : (m * d)) {
			for (j in ((m - 1) * d + 1) : (m * d)){
				C[i, j] = rho
			}	
		}
	}
	Cov = C + diag(tau2 - rho, p)
	return(Cov)
}


#---Block diagonal covariance structure 2---

BD2 = function(p, d, tau2 = 1, rho){
# d is the block size, rho is a vector
	C = diag(rep(tau2, p))
	k = floor(p / d)
	for (m in 1 : k){
		rhotemp = sample(rho, 1)
		for (i in ((m - 1) * d + 1) : (m * d)) {
			for (j in ((m - 1) * d + 1) : (m * d)){
				if (i == j) C[i, j] = tau2
				else C[i, j] = rhotemp
			}	
		}
	}
	return(C)
}

BD3 = function(p, d, tau2 = 1, rho){
# d is the block size; rho is a vector, giving the lower and upper limits of the coefficients
  C = diag(rep(tau2, p))
	k = floor(p / d)
	for (m in 1 : k){
		rhotemp = runif(1, rho[1], rho[2])
		for (i in ((m - 1) * d + 1) : (m * d)) {
			for (j in ((m - 1) * d + 1) : (m * d)){
				if (i != j) C[i, j] = rhotemp
			}	
		}
	}
	return(C)
}

BD4 = function(p, d, tau2 = 1, rho){
# d is the block size; rho is a vector, giving the lower and upper limits of the coefficients
  C = diag(rep(tau2, p))
	k = floor(p / d)
	k1 = floor(k / 3)
	for (m in 1 : k1){
		rhotemp = rho[1]
		for (i in ((m - 1) * d + 1) : (m * d)) {
			for (j in ((m - 1) * d + 1) : (m * d)){
				if (i != j) C[i, j] = rhotemp
			}	
		}
	}
	for (m in (k1 + 1) : k){
		rhotemp = rho[2]
		for (i in ((m - 1) * d + 1) : (m * d)) {
			for (j in ((m - 1) * d + 1) : (m * d)){
				if (i != j) C[i, j] = rhotemp
			}	
		}
	}
	return(C)
}

#---Block banded (bandwidth 3) precision structure---

block = function(p, k, tau2, rho, rho1){
	# k is the number of blocks
	C = matrix(0, p, p)
	d = p / k
	for (m in 1 : k){
		for (i in ((m - 1) * d + 1) : (m * d)) {
			for (j in ((m - 1) * d + 1) : (m * d)){
				C[i, j] = rho
			}	
		}
	}
	for (m1 in 1 : (k - 1)){
		m2 = m1 + 1
		for (i in ((m1 - 1) * d + 1) : (m1 * d)) {
			for (j in ((m2 - 1) * d + 1) : (m2 * d)){
				C[i, j] = rho1
			}	
		}
	}
	for (m1 in 2 : k){
		m2 = m1 - 1
		for (i in ((m1 - 1) * d + 1) : (m1 * d)) {
			for (j in ((m2 - 1) * d + 1) : (m2 * d)){
				C[i, j] = rho1
			}	
		}
	}
	Omega = C + diag(tau2 - rho, p)
	return(Omega)
}


QS = function(u){
	if (u == 0) ker = 1
	else ker = 25 * ( sin(6 * pi * u / 5) / (6 * pi * u / 5) - cos(6 * pi * u / 5) ) / (12 * pi^2 * u^2)
	return(ker)
}



#--------------- Individual Graph ---------------

individual = function(X, c0 = 0.1, tau = seq(0.5, 3, 0.01), MBT = 3000){
n = dim(X)[1]; p = dim(X)[2]; smax = n / 2
Mp = p * (p - 1) / 2; m = 1
Eresidual = matrix(0, n, p)
CoefMatrix = matrix(0, p, p - 1)
meanX = colMeans(X)
X = t(t(X) - meanX)
XS = matrix(0, n, p)
for (i in 1 : p){
	XS[, i] = X[, i] / sd(X[, i])
}

TestAll = matrix(0, n, Mp)
BTAll = matrix(0, n, Mp)
recovery = diag(rep(1, p))

lentau = length(tau)
IndMatrix = matrix(1, p, p) - diag(rep(1, p))

for (i in 1 : p){
	out = scalreg(X = XS[, -i], y = X[, i], lam0 = sqrt(2 * 2.01 * log(p * (log(p))^(1.5) / sqrt(n)) / n))
	Eresidual[, i] = out$residuals
	CoefMatrix[i, ] = out$coefficients / apply(X[, -i], 2, sd)
}
CovRes = t(Eresidual) %*% Eresidual / n
Est = matrix(1, p, p)

for (i in 1 : (p - 1)){
	for (j in (i + 1) : p){
		temp = Eresidual[, i] * Eresidual[, j] + Eresidual[, i]^2 * CoefMatrix[j, i] + Eresidual[, j]^2 * CoefMatrix[i, j - 1]
		TestAll[, m] = temp / sqrt(diag(CovRes)[i] * diag(CovRes)[j])
		omegaHat = - mean(temp) / (diag(CovRes)[i] * diag(CovRes)[j])
		BTAll[, m] = ( Eresidual[, i] * Eresidual[, j] + mean(temp) ) / sqrt(diag(CovRes)[i] * diag(CovRes)[j]) - omegaHat * sqrt(diag(CovRes)[j]) * ( Eresidual[, i]^2 - CovRes[i, i] ) / (2 * sqrt(diag(CovRes)[i]))  - omegaHat * sqrt(diag(CovRes)[i]) * ( Eresidual[, j]^2 - CovRes[j, j] ) / (2 * sqrt(diag(CovRes)[j]))
		Est[i, j] = mean(temp) / sqrt(diag(CovRes)[i] * diag(CovRes)[j])
		Est[j, i] = Est[i, j]
      	m = m + 1
	}
}
BTAllMean = colMeans(BTAll)
BTAllcenter = t(t(BTAll) - BTAllMean)
	
NumAll = c()
DenAll = c()
for(i in 1 : Mp){
	AR1 = ar(BTAllcenter[, i], aic = FALSE, order.max = 1)
	rhoEst = AR1$ar
	sigma2Est = AR1$var.pred
	NumAll[i] = 4 * (rhoEst * sigma2Est)^2 / (1 - rhoEst)^8
	DenAll[i] = sigma2Est^2 / (1 - rhoEst)^4
}
a2All = sum(NumAll) / sum(DenAll)
bandwidthAll = 1.3221 * (a2All * n)^(0.2)
BTcovAll = matrix(0, n, n)
for (i in 1 : n){
	for (j in 1 : n){
		BTcovAll[i, j] = QS(abs(i - j) / bandwidthAll)
	}
}
	
BTAllsim = matrix(0, Mp, MBT)
for (i in 1 : MBT){
      temp = mvrnorm(1, rep(0, n), BTcovAll)
      BTAllsim[, i] = (n)^(-0.5) * colSums(temp * BTAllcenter)
}

WdiagAllEmp = 0
for (i in 1 : n){
	WdiagAllEmp = WdiagAllEmp + BTAllcenter[i, ]^2
}
WdiagAllEmp = WdiagAllEmp / n
TestAllstandard = WdiagAllEmp^(-1/2) * colMeans(TestAll)
BTAllsim0 = WdiagAllEmp^(-1/2) * BTAllsim
TestStat = sqrt(n) * max(abs(TestAllstandard))

BTAllsim1 = c()
for (i in 1 : MBT)
{
	BTAllsim1[i] = max(abs(BTAllsim0[, i]))
}
QAll = sort(BTAllsim1)[0.95 * MBT]

#cat("iteration = ", c(1, TestStat, QAll), "\n")
PCtemp = colMeans(TestAll)
TPStemp = round(TestAllstandard, 5)
PCmaxIndex0 = order(-abs(TPStemp))[1]
PCmaxIndex = which(TPStemp %in% c(TPStemp[PCmaxIndex0], -TPStemp[PCmaxIndex0]))
SignalID = c()	

for (q in 1 : length(PCmaxIndex)){
	SignalIDtemp1 = which(abs(Est - PCtemp[PCmaxIndex[q]]) == min(abs(Est - PCtemp[PCmaxIndex[q]])), arr.ind = TRUE)
	SignalID = rbind(SignalID, SignalIDtemp1)
	#cat("q = ", c(q, as.vector(SignalIDtemp1)), "\n")
}

MSignal = 1
TestPro = colMeans(TestAll); BTPro = BTAllsim0; TestProstandard = TestAllstandard
#QPro = QAll
repeat{
	TestPro = TestPro[-PCmaxIndex]
	BTPro = BTPro[-PCmaxIndex, ]
	TestProstandard = TestProstandard[-PCmaxIndex]
	TestStatPro = sqrt(n) * max(abs(TestProstandard))

	BTAllsimPro = c()
	for (i in 1 : MBT)
	{
		BTAllsimPro[i] = max(abs(BTPro[, i]))
	}
	QPro = sort(BTAllsimPro)[0.95 * MBT]
	
	if (TestStatPro < QPro)	{break}
	MSignal = MSignal + 1
	#cat("iteration = ", c(MSignal, TestStatPro, QPro), "\n")
	
	PCtemp = TestPro
	TPStemp = round(TestProstandard, 5)
	PCmaxIndex0 = order(-abs(TPStemp))[1]
	PCmaxIndex = which(TPStemp %in% c(TPStemp[PCmaxIndex0], -TPStemp[PCmaxIndex0]))
	SignalIDtemp = c()
	for (q in 1 : length(PCmaxIndex)){
		SignalIDtemp1 = which(abs(Est - PCtemp[PCmaxIndex[q]]) == min(abs(Est - PCtemp[PCmaxIndex[q]])), arr.ind = TRUE)
		SignalIDtemp = rbind(SignalIDtemp, SignalIDtemp1)
		#cat("q = ", c(q, as.vector(SignalIDtemp1)), "\n")
	}
	SignalID = rbind(SignalID, SignalIDtemp)		
}

#cat(c(dim(SignalID)[1], length(unique(SignalID[, 1] * 1000 + SignalID[, 2]))), "\n")
aug = ceiling(c0 * dim(SignalID)[1] / (2 * (1 - c0)))

PCtemp = TestPro
TPStemp = round(TestProstandard, 5)
PCmaxIndex0 = order(-abs(TPStemp))[1 : aug]
PCmaxIndex = which(TPStemp %in% c(TPStemp[PCmaxIndex0], -TPStemp[PCmaxIndex0]))
SignalIDtemp = c()
for (q in 1 : length(PCmaxIndex)){
	SignalIDtemp1 = which(abs(Est - PCtemp[PCmaxIndex[q]]) == min(abs(Est - PCtemp[PCmaxIndex[q]])), arr.ind = TRUE)
	SignalIDtemp = rbind(SignalIDtemp, SignalIDtemp1)
	#cat("q = ", c(q, as.vector(SignalIDtemp1)), "\n")
}
SignalID = rbind(SignalID, SignalIDtemp)

for (i in 1 : dim(SignalID)[1]){
	index1 = SignalID[i, 1]; index2 = SignalID[i, 2]
	recovery[index1, index2] = 1
}

#--------------- Liu 2013 -------------

rejectLiu = c()
for (i in 1 : lentau){
	ThresholdLiu = tau[i] * sqrt(log(p) / n) * IndMatrix
	SRecLiu = 1 * (abs(Est) > ThresholdLiu); NoNSRecLiu = 1 * (SRecLiu == 0)
	rejectLiu = c(rejectLiu, max(1, (sum(SRecLiu) - p)))
}

FDPLiu = 2 * p * (p - 1) * ( 1 - pnorm( tau * sqrt(log(p)) ) ) / rejectLiu
if (sum(FDPLiu <= 0.05) > 0) tauLiu = min(c(2, tau[FDPLiu <= 0.05]))
else tauLiu = 2
ThresholdLiu = tauLiu * sqrt(log(p) / n) * IndMatrix
Liu = 1 * (abs(Est) > ThresholdLiu)

return(cbind(recovery, Liu))
}



#--------------- Population Graph ---------------

population = function(Z, c0 = 0.1, tau = seq(0.5, 3, 0.01), MBT = 3000){
##Z is a n * p * MC dimensional array, where MC is number of subjects
n = dim(Z)[1]; p = dim(Z)[2]; MC = dim(Z)[3]; smax = n / 2
Mp = p * (p - 1) / 2
lentau = length(tau)
IndMatrix = matrix(1, p, p) - diag(rep(1, p))
WdiagAllEmp = 0

CAll = array(dim = c(p, p, MC))
BTAllsimAll = 0
TestAll = matrix(0, n * MC, Mp)
BTAll = matrix(0, n * MC, Mp)
recovery = diag(rep(1, p))

for (sub in 1 : MC){
	X = Z[, , sub]
	m = 1
	Eresidual = matrix(0, n, p)
	CoefMatrix = matrix(0, p, p - 1)
	meanX = colMeans(X)
	X = t(t(X) - meanX)
	XS = matrix(0, n, p)
	for (i in 1 : p){
		XS[, i] = X[, i] / sd(X[, i])
	}

	for (i in 1 : p){
		out = scalreg(X = XS[, -i], y = X[, i], lam0 = sqrt(2 * 2.01 * log(p * (log(p))^(1.5) / sqrt(n)) / n))
		Eresidual[, i] = out$residuals
		CoefMatrix[i, ] = out$coefficients / apply(X[, -i], 2, sd)
	}

	CovRes = t(Eresidual) %*% Eresidual / n
	Est = matrix(1, p, p)

	indexN = c(((sub - 1) * n + 1) : (sub * n))
	for (i in 1 : (p - 1)){
		for (j in (i + 1) : p){
			temp = Eresidual[, i] * Eresidual[, j] + Eresidual[, i]^2 * CoefMatrix[j, i] + Eresidual[, j]^2 * CoefMatrix[i, j - 1]
			TestAll[indexN, m] = temp / sqrt(diag(CovRes)[i] * diag(CovRes)[j])
			omegaHat = - mean(temp) / (diag(CovRes)[i] * diag(CovRes)[j])
			BTAll[indexN, m] = ( Eresidual[, i] * Eresidual[, j] + mean(temp) ) / sqrt(diag(CovRes)[i] * diag(CovRes)[j]) - omegaHat * sqrt(diag(CovRes)[j]) * ( Eresidual[, i]^2 - CovRes[i, i] ) / (2 * sqrt(diag(CovRes)[i]))  - omegaHat * sqrt(diag(CovRes)[i]) * ( Eresidual[, j]^2 - CovRes[j, j] ) / (2 * sqrt(diag(CovRes)[j]))
			Est[i, j] = mean(temp) / sqrt(diag(CovRes)[i] * diag(CovRes)[j])
			Est[j, i] = Est[i, j]
      		m = m + 1
		}
	}
	CAll[, , sub] = Est
	BTAllMean = colMeans(BTAll[indexN, ])
	BTAlltemp = t(t(BTAll[indexN, ]) - BTAllMean)
	WdiagAllEmptemp = apply(BTAlltemp^2, 2, mean)
	WdiagAllEmp = WdiagAllEmp + WdiagAllEmptemp
	
	NumAll = c()
	DenAll = c()
	for(i in 1 : Mp){
		AR1 = ar(BTAlltemp[, i], aic = FALSE, order.max = 1)
		rhoEst = AR1$ar
		sigma2Est = AR1$var.pred
		NumAll[i] = 4 * (rhoEst * sigma2Est)^2 / (1 - rhoEst)^8
		DenAll[i] = sigma2Est^2 / (1 - rhoEst)^4
	}
	a2All = sum(NumAll) / sum(DenAll)
	bandwidthAll = 1.3221 * (a2All * n)^(0.2)
	BTcovAll = matrix(0, n, n)
      for (i in 1 : n){
		for (j in 1 : n){
			BTcovAll[i, j] = QS(abs(i - j) / bandwidthAll)
		}
	}
	
	BTAllsimInd = matrix(0, Mp, MBT)
	for (i in 1 : MBT){
      	temp = mvrnorm(1, rep(0, n), BTcovAll)
      	BTAllsimInd[, i] = (n)^(-0.5) * colSums(temp * BTAlltemp)
	}
	BTAllsimAll = BTAllsimAll + BTAllsimInd
}

WdiagAllEmp = WdiagAllEmp / MC

#BTAllave = colMeans(BTAll)
#BTAll = t(t(BTAll) - BTAllave)
#WdiagAllEmp = 0
#for (i in 1 : (MC * n)){
#	WdiagAllEmp = WdiagAllEmp + BTAll[i, ]^2
#}
##for (dd in 1 : (n - 1)){
##	tempsumAll = 0
##	for (i in (dd + 1) : n){
##		tempsumAll = tempsumAll + BTAll[i, ] * BTAll[i - dd, ]
##	}
##	WdiagAllEmp = WdiagAllEmp + 2 * QS(dd / bandwidthAll) * tempsumAll
##}
#WdiagAllEmp = WdiagAllEmp / (n * MC)
TestAllstandard = WdiagAllEmp^(-1/2) * colMeans(TestAll)

EstAll = apply(CAll, c(1, 2), mean)
SdAll = apply(CAll, c(1, 2), sd)

BTAllsimAll0 = (MC)^(-0.5) * WdiagAllEmp^(-1/2) * BTAllsimAll
TestStat = sqrt(n * MC) * max(abs(TestAllstandard))

BTAllsim = c()
for (i in 1 : MBT)
{
	BTAllsim[i] = max(abs(BTAllsimAll0[, i]))
}
QAll = sort(BTAllsim)[0.95 * MBT]

#cat("iteration = ", c(1, TestStat, QAll), "\n")
PCtemp = colMeans(TestAll)
TPStemp = round(TestAllstandard, 5)
PCmaxIndex0 = order(-abs(TPStemp))[1]
PCmaxIndex = which(TPStemp %in% c(TPStemp[PCmaxIndex0], -TPStemp[PCmaxIndex0]))
SignalID = c()	

for (q in 1 : length(PCmaxIndex)){
	SignalIDtemp1 = which(abs(EstAll - PCtemp[PCmaxIndex[q]]) == min(abs(EstAll - PCtemp[PCmaxIndex[q]])), arr.ind = TRUE)
	SignalID = rbind(SignalID, SignalIDtemp1)
	#cat("q = ", c(q, as.vector(SignalIDtemp1)), "\n")
}

MSignal = 1
TestPro = colMeans(TestAll); BTPro = BTAllsimAll0; TestProstandard = TestAllstandard
#QPro = QAll
repeat{
	TestPro = TestPro[-PCmaxIndex]
	BTPro = BTPro[-PCmaxIndex, ]
	TestProstandard = TestProstandard[-PCmaxIndex]
	TestStatPro = sqrt(n * MC) * max(abs(TestProstandard))

	BTAllsimPro = c()
	for (i in 1 : MBT)
	{
		BTAllsimPro[i] = max(abs(BTPro[, i]))
	}
	QPro = sort(BTAllsimPro)[0.95 * MBT]
	
	if (TestStatPro < QPro)	{break}
	MSignal = MSignal + 1
	#cat("iteration = ", c(MSignal, TestStatPro, QPro), "\n")
	
	PCtemp = TestPro
	TPStemp = round(TestProstandard, 5)
	PCmaxIndex0 = order(-abs(TPStemp))[1]
	PCmaxIndex = which(TPStemp %in% c(TPStemp[PCmaxIndex0], -TPStemp[PCmaxIndex0]))
	SignalIDtemp = c()
	for (q in 1 : length(PCmaxIndex)){
		SignalIDtemp1 = which(abs(EstAll - PCtemp[PCmaxIndex[q]]) == min(abs(EstAll - PCtemp[PCmaxIndex[q]])), arr.ind = TRUE)
		SignalIDtemp = rbind(SignalIDtemp, SignalIDtemp1)
		#cat("q = ", c(q, as.vector(SignalIDtemp1)), "\n")
	}
	SignalID = rbind(SignalID, SignalIDtemp)		
}

#cat(c(dim(SignalID)[1], length(unique(SignalID[, 1] * 1000 + SignalID[, 2]))), "\n")
aug = ceiling(c0 * dim(SignalID)[1] / (2 * (1 - c0)))

PCtemp = TestPro
TPStemp = round(TestProstandard, 5)
PCmaxIndex0 = order(-abs(TPStemp))[1 : aug]
PCmaxIndex = which(TPStemp %in% c(TPStemp[PCmaxIndex0], -TPStemp[PCmaxIndex0]))
SignalIDtemp = c()
for (q in 1 : length(PCmaxIndex)){
	SignalIDtemp1 = which(abs(EstAll - PCtemp[PCmaxIndex[q]]) == min(abs(EstAll - PCtemp[PCmaxIndex[q]])), arr.ind = TRUE)
	SignalIDtemp = rbind(SignalIDtemp, SignalIDtemp1)
	#cat("q = ", c(q, as.vector(SignalIDtemp1)), "\n")
}
SignalID = rbind(SignalID, SignalIDtemp)

ResC = SignalID
for (i in 1 : dim(SignalID)[1]){
	index1 = SignalID[i, 1]; index2 = SignalID[i, 2]
	recovery[index1, index2] = 1
}

#--------------- Liu 2013 -------------

EstT = sqrt(MC) * EstAll / (SdAll + 10^(-6))
rejectLiu = c()
for (i in 1 : lentau){
	ThresholdLiu = tau[i] * sqrt(log(p)) * IndMatrix
	SRecLiu = 1 * (abs(EstT) > ThresholdLiu); NoNSRecLiu = 1 * (SRecLiu == 0)
	rejectLiu = c(rejectLiu, max(1, (sum(SRecLiu) - p)))
}

FDPLiu = 2 * p * (p - 1) * ( 1 - pnorm( tau * sqrt(log(p)) ) ) / rejectLiu
if (sum(FDPLiu <= 0.05) > 0) tauLiu = min(c(2, tau[FDPLiu <= 0.05]))
if (sum(FDPLiu <= 0.05) == 0) tauLiu = 2
ThresholdLiu = tauLiu * sqrt(log(p)) * IndMatrix
Liu = 1 * (abs(EstT) > ThresholdLiu)

#--------------- Minimum pvalue on EstAll -------------

pv = c()
Beta = c()
record = 1
pv0 = 2 * (1 - pnorm(abs(EstT)))
for(i in 1 : (p - 1)){
	for (j in (i + 1) : p){
		pv[record] = pv0[i, j]
		Beta[record] = qbeta(0.05, 1, Mp - record + 1)
		record = record + 1
	}
}
pv1 = sort(pv)
a0 = order((-1) * (pv1 > Beta))[1]
a1 = ceiling((1 + c0) * a0)
pvThreshold = pv1[a1]
MinPv = 1 * (pv0 < pvThreshold)

return(cbind(recovery, Liu, MinPv))
}

